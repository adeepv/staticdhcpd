#summary How to make staticDHCPd do things that aren't quite static

= Overview =
staticDHCPd is meant to help administrators easily configure static environments, with easy-to-integrate provisioning facilities. However, special cases have arisen that require dynamic behaviour on limited scales.

The motivating case for adding support for dynamic provisioning to staticDHCPd 1.6.0 is a LAN party context in which guests need to register their systems before they can be given a static mapping by site administration. Using the new facility, unknown clients can be given configuration that puts them into an isolated subnet on a short lease so they can access a registration system, and the DHCP server itself can send notification of the new arrival to a webservice to streamline the operators' work.

The rest of this article outlines how to use the sample configurations provided with staticDHCPd. Any site seeking to use dynamic services will almost certainly need to do some customisation, though, so consider at least basic Python knowledge to be a pre-requisite.

Be aware also that, unlike dynamic-provisioning-focused servers, like the ISC's, not all provisioning semantics are respected and that, unlike staticDHCPd's static behaviour, this facet of the system is *not* RFC-compliant. It probably won't do anything environment-breaking, but be prepared for some weird things; feedback, if you encounter any, is very welcome.

----
= Modules =
== In-memory ==
Provided in `samples/dynamism.py`, this is the reference module for dynamic allocation, providing management for leases in a single-DHCP-server environment.


To use this module, copy it to the same path as `conf.py` (unless you know how packages work) and add the line `import dynamism` to `conf.py`'s `init()` function.

Modify `dynamism.py` to reflect values appropriate for your environment, then replace `None` with `dynamism.provisionDynamic(mac)` in `conf.py`'s `handleUnknownMac(mac)` function.


That should be it for the basic use-case.  If you want to do anything cool, like send a JSON message to a webservice when an unknown MAC appears or block clients after they renew five times, just edit the logic in `dynamism.py`. It's simple enough that even novices should be able to figure out where to paste code from tutorials found on the Internet, so just experiment.


== Others ==
A Postgres or MySQL module contribution would be very much appreciated, since a lot of sites will need to run multiple servers for HA purposes and be able to handle fault-tolerance without a bunch of DECLINEs. Writing such a module shouldn't be hard, and if you submit one, staticDHCPd's maintainer won't mind stripping out sensitive information and generalising it. (Time does not, unfortunately, permit creating one upstream in the near future)